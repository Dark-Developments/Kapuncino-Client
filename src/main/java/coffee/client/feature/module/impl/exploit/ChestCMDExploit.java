package coffee.client.feature.module.impl.exploit;

import coffee.client.CoffeeMain;
import coffee.client.feature.config.DoubleSetting;
import coffee.client.feature.config.StringSetting;
import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.event.impl.AttackEntityEvent;
import coffee.client.helper.event.impl.PacketEvent;
import me.x150.jmessenger.MessageSubscription;
import net.minecraft.block.Blocks;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.Hand;

public class ChestCMDExploit extends Module {
    final StringSetting command = this.config.create(new StringSetting.Builder("").name("command")
            .description("command")
            .get());
    final DoubleSetting delay = this.config.create(new DoubleSetting.Builder(50).name("Delay")
            .description("delay between command and chest open")
            .defaultValue(55.0)
            .min(0)
            .max(100)
            .precision(1)
            .get());

    public ChestCMDExploit() {
        super("ChestCMDExploit", "Exploit GUIs using chests", ModuleType.EXPLOIT);
    }

    @MessageSubscription
    void onpacket(PacketEvent.Sent event){
        if (event.getPacket() instanceof PlayerInteractBlockC2SPacket packet){
            if (CoffeeMain.client.world.getBlockState(packet.getBlockHitResult().getBlockPos()).getBlock() == Blocks.CHEST){
                event.cancel();

                CoffeeMain.client.player.networkHandler.sendCommand(command.getValue());
                try {
                    Thread.sleep(delay.getValue().intValue());
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                toggle();
                CoffeeMain.client.player.networkHandler.sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, packet.getBlockHitResult(), 0));
                toggle();
            }
        }
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}
